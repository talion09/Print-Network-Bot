from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from tgbot.handlers.users.start import admins_list, ru_language, bot_start
from tgbot.states.constant import Regular, Appeal


async def regular(message: types.Message):
    db = message.bot.get("db")
    _ = message.bot.get("lang")

    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    text1 = _("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
    text2 = _("–¶–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤")
    text3 = _("–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?")
    # text1 = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"
    # text2 = "–¶–µ–Ω—ã —Ç–æ–≤–∞—Ä–æ–≤"
    # text3 = "–ß—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?"
    markup.add(KeyboardButton(text=text1))
    markup.add(KeyboardButton(text=text2))
    await message.answer(text3, reply_markup=markup)


async def registr(message: types.Message):
    db = message.bot.get("db")
    _ = message.bot.get("lang")

    await message.answer("TEXT")
    select = await db.select_user(telegram_id=int(message.from_user.id))
    name = select.get("brand")
    number = select.get("number")
    text1 = _("–ë—Ä–µ–Ω–¥")
    text2 = _("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    text3 = _("–í—Å–µ –≤–µ—Ä–Ω–æ?")
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    yes = _("–î–∞ ‚úÖ")
    custm = _("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    markup.insert(KeyboardButton(text=yes))
    markup.insert(KeyboardButton(text=custm))
    await message.answer(f"{text3}\n\n{text1}: {name}\n{text2}: {number}\n", reply_markup=markup)
    await Regular.Check.set()


# Regular.Check
async def registr_1(message: types.Message, state: FSMContext):
    db = message.bot.get("db")
    _ = message.bot.get("lang")

    surname = _("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é")
    await message.answer(surname)
    await Regular.Surname.set()


# Regular.Surname
async def registr_2(message: types.Message, state: FSMContext):
    db = message.bot.get("db")
    _ = message.bot.get("lang")

    if " " in str(message.text):
        await state.update_data(surname=message.text)
        select = await db.select_user(telegram_id=int(message.from_user.id))
        name = select.get("brand")
        number = select.get("number")
        text1 = _("–ë—Ä–µ–Ω–¥")
        text2 = _("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        surname = _("–ò–º—è –∏ –§–∞–º–∏–ª–∏—è")
        text3 = _("–í—Å–µ –≤–µ—Ä–Ω–æ?")
        await message.answer(f"{text3}\n\n{text1}: {name}\n{text2}: {number}\n{surname}: {message.text}\n")
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        yes = _("–î–∞ ‚úÖ")
        custm = _("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        markup.insert(KeyboardButton(text=yes))
        markup.insert(KeyboardButton(text=custm))
        await Regular.Confirm.set()
    else:
        surname = _("–í–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –ò–º—è –∏ –§–∞–º–∏–ª–∏—é")
        await message.answer(surname)


# Regular.Confirm
async def registr_3(message: types.Message, state: FSMContext):
    db = message.bot.get("db")
    _ = message.bot.get("lang")

    data = await state.get_data()
    surname_db = data.get("surname")
    select = await db.select_user(telegram_id=int(message.from_user.id))
    name = select.get("brand")
    number = select.get("number")
    text1 = _("–ë—Ä–µ–Ω–¥")
    text2 = _("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    surname = _("–ò–º—è –∏ –§–∞–º–∏–ª–∏—è")
    for_worker = f"–ê–Ω–∫–µ—Ç–∞: \n\n" \
                 f"{text1}: {name}\n{text2}: {number}\n{surname}: {surname_db}"
    await message.bot.send_message(153479611, for_worker)

    text = _("–°–ø–∞—Å–∏–±–æ –∏ —Ç–¥")
    await message.answer(text)
    await bot_start(message, state)


async def diler(message: types.Message, state: FSMContext):
    await message.answer("TEXT")


async def appeal(message: types.Message, state: FSMContext):
    _ = message.bot.get("lang")

    await message.answer("TEXT")
    main_menu = _("–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é")
    send_appeal = _("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    markup.insert(KeyboardButton(text=main_menu))
    await message.answer(send_appeal, reply_markup=markup)
    await Appeal.Text.set()


# Appeal.Text
async def appeal_1(message: types.Message, state: FSMContext):
    _ = message.bot.get("lang")

    is_true = _("–í—Å–µ –≤–µ—Ä–Ω–æ?")
    markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    yes = _("–î–∞ ‚úÖ")
    custm = _("–ù–µ—Ç ‚ùå")
    markup.insert(KeyboardButton(text=yes))
    markup.insert(KeyboardButton(text=custm))
    await state.update_data(user_text=message.text)
    await message.answer(f"{is_true} \n\n{message.text}", reply_markup=markup)
    await Appeal.Confirm.set()


# Appeal.Confirm
async def appeal_2(message: types.Message, state: FSMContext):
    db = message.bot.get("db")
    _ = message.bot.get("lang")

    if message.text in ["–î–∞ ‚úÖ", "Ha ‚úÖ"]:
        data = await state.get_data()
        user_text = data.get("user_text")
        await message.bot.send_message(153479611, user_text)

        text = _("–°–ø–∞—Å–∏–±–æ –∏ —Ç–¥")
        await message.answer(text)
        await bot_start(message, state)
    elif message.text in ["–ù–µ—Ç ‚ùå", "Yo'q ‚ùå"]:
        main_menu = _("–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é")
        send_appeal = _("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –∂–∞–ª–æ–±—É –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ")
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
        markup.insert(KeyboardButton(text=main_menu))
        await message.answer(send_appeal, reply_markup=markup)
        await Appeal.Text.set()
    else:
        pass


def register_constant_customer(dp: Dispatcher):
    dp.register_message_handler(regular, text=["üë§ –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ö–ª–∏–µ–Ω—Ç", "üë§ Doimiy mijoz"])
    dp.register_message_handler(registr, text=["–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", "Ro ªyxatdan o ªtish"])
    dp.register_message_handler(registr_1, text=["–î–∞ ‚úÖ", "Ha ‚úÖ"], state=Regular.Check)
    dp.register_message_handler(registr_2, state=Regular.Surname)
    dp.register_message_handler(registr_3, text=["–î–∞ ‚úÖ", "Ha ‚úÖ"], state=Regular.Confirm)
    dp.register_message_handler(diler, text=["–î–∏–ª–µ—Ä", "Diler"])
    dp.register_message_handler(appeal, text=["‚úâÔ∏è –ñ–∞–ª–æ–±–∞ –∏ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ", "‚úâÔ∏è Shikoyat va Taklif"])
    dp.register_message_handler(appeal_1, state=Appeal.Text)
    dp.register_message_handler(appeal_2, state=Appeal.Confirm)







